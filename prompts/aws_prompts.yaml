---
# AWS Service Prompts
prompts:
  # EC2 Prompts
  list_instances:
    service: ec2
    operation: list
    description: "List all EC2 instances with their details"
    template: |
      Generate Python code using boto3 to list all EC2 instances in region {region}.
      Include the following details for each instance:
      - Instance ID
      - Instance type
      - State
      - Launch time
      - Tags
      - Public/Private IPs

      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - name: region
        description: "AWS region to list instances from (e.g., us-east-1)"
    tags:
      - ec2
      - list
      - instances
    cloud: aws

  get_instance_metrics:
    service: ec2
    operation: metrics
    description: "Get EC2 instance metrics"
    template: |
      Generate Python code using boto3 to get CloudWatch metrics for EC2 instance(s).
      Metrics to collect:
      - CPU Utilization
      - Memory Usage
      - Disk I/O
      - Network Traffic

      Instance ID: {instance_id}
      Time Period: {period} seconds

      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - name: instance_id
        description: "ID of the EC2 instance to monitor"
      - name: period
        description: "Time period in seconds for metrics collection"
    tags:
      - ec2
      - metrics
      - monitoring
    cloud: aws

  # S3 Prompts
  analyze_bucket:
    service: s3
    operation: analyze
    description: "Analyze S3 bucket size and object count"
    template: |
      Generate Python code using boto3 to analyze the S3 bucket {bucket_name}.
      Calculate and report:
      - Total bucket size
      - Number of objects
      - Size distribution by prefix
      - Last modified statistics

      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - name: bucket_name
        description: "Name of the S3 bucket to analyze"
    tags:
      - s3
      - analysis
      - storage
    cloud: aws

  # CloudWatch Prompts
  create_dashboard:
    service: cloudwatch
    operation: dashboard
    description: "Create CloudWatch dashboard"
    template: |
      Generate Python code using boto3 to create a CloudWatch dashboard.
      Include widgets for:
      - {metric_name} statistics
      - Period: {period} seconds
      - Include both average and maximum values
      - Add appropriate annotations

      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - name: metric_name
        description: "Name of the CloudWatch metric to display"
      - name: period
        description: "Time period in seconds for metric aggregation"
    tags:
      - cloudwatch
      - dashboard
      - monitoring
    cloud: aws

  troubleshoot_s3_trigger:
    service: s3
    operation: troubleshoot
    description: "Troubleshoot an S3 bucket trigger issue"
    template: |
      Generate Python code using boto3 to troubleshoot the S3 bucket {bucket_name} trigger issue.

      The script should:
      1. Automatically discover and verify event notification configurations for the specified bucket:
         - Fetch event notification configuration details.
         - Identify the target resource (e.g., Lambda, SNS, SQS) linked to the trigger.
      2. Analyze bucket permissions:
         - Retrieve and validate the bucket policy.
         - Inspect associated IAM roles or policies for the triggering service or target resource.
      3. List and analyze recent CloudTrail logs to confirm S3 events (e.g., PUT operations) are being logged and triggering the configured event.
      4. Fetch and analyze CloudWatch metrics for the bucket:
         - Recent PUT operations.
         - Event notifications triggered.
      5. Automatically identify and validate the target resource (e.g., Lambda function, SNS topic, or SQS queue):
         - Confirm its existence and active status.
         - Fetch its configuration details.
         - Retrieve recent logs or metrics (e.g., Lambda logs from CloudWatch, SNS topic delivery logs, or SQS message visibility metrics).
      6. Ensure proper error handling, logging, and comprehensive debugging information.
      7. Only request user-provided variables if they cannot be discovered programmatically (e.g., AWS region, specific configurations not exposed via APIs).

      Requirements:
      - Include necessary imports.
      - Follow AWS best practices.
      - Add type hints and docstrings.
      - Ensure the script outputs clear and actionable findings or next steps.
    variables:
      - name: bucket_name
        description: "Name of the S3 bucket with trigger issues"
    tags:
      - s3
      - troubleshooting
      - triggers
    cloud: aws

  troubleshoot_ec2_connection:
    service: ec2
    operation: troubleshoot
    description: "Diagnose and resolve connectivity issues with an EC2 instance."
    template: |
      Generate Python code using boto3 to diagnose and troubleshoot connectivity issues for the EC2 instance with ID "{instance_id}" in region "{region}".

      The script should:
      1. **Verify the instance's current state**:
         - Fetch instance details, including state (running/stopped), public/private IP addresses, security groups, and network interface details.
      2. **Check security group configurations**:
         - List the security groups attached to the instance.
         - Verify inbound and outbound rules for the necessary ports (e.g., SSH on port 22 for Linux, RDP on port 3389 for Windows).
         - Ensure no overly restrictive rules are blocking traffic (e.g., 0.0.0.0/0 on SSH or RDP).
      3. **Inspect Network ACLs**:
         - Fetch the network ACLs associated with the subnet and verify inbound and outbound rules.
         - Ensure there are no conflicting rules that might block traffic to/from the instance.
      4. **Check routing table configurations**:
         - Retrieve the routing table associated with the instance's subnet.
         - Ensure there is a route to the internet (for public instances) or to the required VPC resources (for private instances).
         - Verify that the subnet has a route to the Internet Gateway (IGW) for public instances or a NAT Gateway for private instances.
      5. **Verify the VPC and subnet settings**:
         - Ensure the subnet is configured for public access (if needed) by checking for an associated Internet Gateway (IGW).
         - Confirm that the instance's network interface is assigned a public IP if public access is required.
         - Check that the subnet's route table is correctly configured.
      6. **Retrieve and analyze CloudWatch metrics for the instance**:
         - Network traffic (in/out).
         - CPU utilization.
         - Disk I/O.
         - Ensure there are no unusual spikes or bottlenecks in the metrics that could be causing connectivity issues.
      7. **Check the instance's system logs**:
         - Fetch recent system logs (via EC2 console or AWS Systems Manager) to check for any error messages related to networking, security, or instance health.
      8. **Use AWS Reachability Analyzer**:
         - Simulate connectivity tests to/from the instance.
         - Check for any routing issues or network misconfigurations.
         - Provide details on any detected network reachability issues.
      9. **Inspect IAM roles associated with the instance**:
         - Ensure that the instance has the necessary IAM role attached to it for required actions (e.g., Systems Manager, CloudWatch Logs).
         - Verify the role has permissions for networking diagnostics if needed.
      10. **Analyze CloudTrail logs**:
         - Retrieve and analyze CloudTrail logs to check for any changes in security groups, route tables, or networking settings that might have affected the instance's connectivity.
         - Identify any suspicious or unexpected actions that could have led to the issue.
      11. **Check Elastic IP (EIP) association** (if applicable):
         - If the instance is expected to have a static public IP, verify that an Elastic IP (EIP) is correctly associated with the instance.
         - Ensure that the EIP is not disassociated or blocked by any security groups or ACLs.
      12. **Actionable recommendations**:
         - Based on the findings, provide recommendations to fix the identified misconfigurations (e.g., modifying security group rules, adjusting route table entries, re-associating EIP).

      Requirements:
      1. Use proper error handling.
      2. Include necessary imports.
      3. Follow AWS best practices.
      4. Add type hints.
      5. Add docstrings.
    variables:
      - name: instance_id
        description: "ID of the EC2 instance having connectivity issues"
      - name: region
        description: "AWS region where the instance is located"
    tags:
      - ec2
      - troubleshooting
      - connectivity
      - misconfigurations
    cloud: aws

  troubleshoot_ec2_connection_2:
    cloud: aws
    service: ec2
    operation: troubleshoot_connection
    description: "Troubleshoot connection issues to an EC2 instance"
    template: |
      Generate Python code using boto3 to troubleshoot connection issues to EC2 instance `{instance_id}` in region `{region}`. The script should:

      1. **Fetch Instance Details**:
        - Instance state (e.g., running, stopped).
        - Public and private IP addresses.
        - Associated security groups.

      2. **Analyze Security Group Inbound Rules**:
        - List inbound rules for the security groups associated with the instance.
        - Check if the necessary ports are open (e.g., port 22 for SSH or port 3389 for RDP).
        - Identify if the inbound rules allow traffic from your IP address or required CIDR ranges.

      3. **Check Network ACLs (NACLs)**:
        - Retrieve the NACLs associated with the instance's subnet.
        - Verify inbound and outbound rules do not block required traffic.

      4. **Verify VPC Route Tables**:
        - Ensure the subnet's route table has a route to an Internet Gateway for internet access.
        - Check for any conflicting routes that might prevent connectivity.

      5. **Check Instance Status Checks**:
        - Retrieve the results of both system and instance status checks.
        - Identify any failed checks that might impact connectivity.

      6. **Review Elastic IP Association** (if applicable):
        - Confirm if an Elastic IP is associated with the instance.
        - Verify that the Elastic IP is correctly configured.

      7. **Optionally, Fetch VPC Flow Logs** (if enabled):
        - Retrieve recent VPC Flow Logs for the instance's network interface.
        - Analyze logs for denied traffic or unusual patterns.

      8. **Provide a Summary Report**:
        - Summarize any potential misconfigurations or issues found.
        - Suggest next steps or recommendations to resolve connectivity issues.

      **Requirements**:

      - Use proper error handling.
      - Include necessary imports.
      - Follow AWS best practices.
      - Add type hints.
      - Add docstrings.

    variables:
      - name: instance_id
        description: "ID of the EC2 instance to troubleshoot"
      - name: region
        description: "AWS region where the instance is located"
    tags:
      - ec2
      - troubleshooting
      - connection
