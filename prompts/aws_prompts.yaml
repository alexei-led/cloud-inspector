---
# AWS Service Prompts
prompts:
  # EC2 Prompts
  list_instances:
    service: ec2
    operation: list
    description: "List all EC2 instances with their details"
    template: |
      Generate Python code using boto3 to list all EC2 instances in region {region}.
      Include the following details for each instance:
      - Instance ID
      - Instance type
      - State
      - Launch time
      - Tags
      - Public/Private IPs
      
      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - region
    tags:
      - ec2
      - list
      - instances

  get_instance_metrics:
    service: ec2
    operation: metrics
    description: "Get EC2 instance metrics"
    template: |
      Generate Python code using boto3 to get CloudWatch metrics for EC2 instance(s).
      Metrics to collect:
      - CPU Utilization
      - Memory Usage
      - Disk I/O
      - Network Traffic
      
      Instance ID: {instance_id}
      Time Period: {period} seconds
      
      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - instance_id
      - period
    tags:
      - ec2
      - metrics
      - monitoring

  # S3 Prompts
  analyze_bucket:
    service: s3
    operation: analyze
    description: "Analyze S3 bucket size and object count"
    template: |
      Generate Python code using boto3 to analyze the S3 bucket {bucket_name}.
      Calculate and report:
      - Total bucket size
      - Number of objects
      - Size distribution by prefix
      - Last modified statistics
      
      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - bucket_name
    tags:
      - s3
      - analysis
      - storage

  # CloudWatch Prompts
  create_dashboard:
    service: cloudwatch
    operation: dashboard
    description: "Create CloudWatch dashboard"
    template: |
      Generate Python code using boto3 to create a CloudWatch dashboard.
      Include widgets for:
      - {metric_name} statistics
      - Period: {period} seconds
      - Include both average and maximum values
      - Add appropriate annotations
      
      Requirements:
      1. Use proper error handling
      2. Include necessary imports
      3. Follow AWS best practices
      4. Add type hints
      5. Add docstrings
    variables:
      - metric_name
      - period
    tags:
      - cloudwatch
      - dashboard
      - monitoring

  troubleshoot_s3_trigger:
    service: s3
    operation: troubleshoot
    description: "Troubleshoot an S3 bucket trigger issue"
    template: |
      Generate Python code using boto3 to troubleshoot the S3 bucket {bucket_name} trigger issue.

      The script should:
      1. Automatically discover and verify event notification configurations for the specified bucket:
         - Fetch event notification configuration details.
         - Identify the target resource (e.g., Lambda, SNS, SQS) linked to the trigger.
      2. Analyze bucket permissions:
         - Retrieve and validate the bucket policy.
         - Inspect associated IAM roles or policies for the triggering service or target resource.
      3. List and analyze recent CloudTrail logs to confirm S3 events (e.g., PUT operations) are being logged and triggering the configured event.
      4. Fetch and analyze CloudWatch metrics for the bucket:
         - Recent PUT operations.
         - Event notifications triggered.
      5. Automatically identify and validate the target resource (e.g., Lambda function, SNS topic, or SQS queue):
         - Confirm its existence and active status.
         - Fetch its configuration details.
         - Retrieve recent logs or metrics (e.g., Lambda logs from CloudWatch, SNS topic delivery logs, or SQS message visibility metrics).
      6. Ensure proper error handling, logging, and comprehensive debugging information.
      7. Only request user-provided variables if they cannot be discovered programmatically (e.g., AWS region, specific configurations not exposed via APIs).

      Requirements:
      - Include necessary imports.
      - Follow AWS best practices.
      - Add type hints and docstrings.
      - Ensure the script outputs clear and actionable findings or next steps.
    variables:
      - bucket_name
    tags:
      - s3
      - troubleshooting
      - triggers
