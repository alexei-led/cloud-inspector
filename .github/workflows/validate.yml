name: Validate
on:
  push:
    branches:
      - "**"
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      # Cache the virtual environment
      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
          key: venv-${{ runner.os }}-py3.12-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/requirements*.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-py3.12-

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install .[dev]

      # Combined lint and test step
      - name: Run validation
        id: validate
        run: |
          source .venv/bin/activate
          # Run linting and capture exit code
          ruff check . --ignore=C901
          RUFF_EXIT=$?

          # Run tests and capture exit code
          pytest tests/ -v --cov=cloud_inspector --cov-report=xml --cov-report=term --cov-report=html
          TEST_EXIT=$?

          # Store results for badge generation
          echo "ruff_status=$RUFF_EXIT" >> $GITHUB_OUTPUT
          echo "test_status=$TEST_EXIT" >> $GITHUB_OUTPUT

          # Calculate coverage percentage for badge
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

          # Exit with failure if either check failed
          [ $RUFF_EXIT -eq 0 ] && [ $TEST_EXIT -eq 0 ]

      # Generate badges based on results
      - name: Generate Badges
        run: |
          source .venv/bin/activate
          pip install pybadges coverage-badge

          # Generate Ruff badge using Python
          python -c '
          from pybadges import badge
          status = "passing" if "${{ steps.validate.outputs.ruff_status }}" == "0" else "failing"
          color = "green" if status == "passing" else "red"
          with open("ruff.svg", "w") as f:
              f.write(badge(left="Ruff", right=status, right_color=color))
          '

          # Generate coverage badge
          coverage-badge -o coverage.svg

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-and-badges
          path: |
            coverage.xml
            htmlcov/
            coverage.svg
            ruff.svg
          retention-days: 14
